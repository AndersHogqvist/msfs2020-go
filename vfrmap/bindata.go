// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x72\xe3\x36\xb2\xfe\x9f\xa7\x40\x70\x2a\x35\x52\x45\x26\x65\xcf\x25\x09\x2d\xa9\x32\xc9\x4c\x2e\xe7\x78\x32\xae\xb1\x93\xd4\xd9\x38\xa5\x82\x48\x88\x42\x0c\x02\x28\x00\xb4\xac\x71\xf9\x81\xf6\x35\xf6\xc9\xb6\x00\xf0\x02\x90\xb4\x46\xda\x5f\xd9\x3f\x36\x09\x74\x7f\x7d\x41\xa3\x81\x6e\x71\xf6\xf9\x9b\xf7\xdf\x5f\xff\xff\xe5\x5b\xb0\xd1\x05\x5d\x7c\x36\x73\xff\x00\x98\x6d\x30\xca\xcc\x03\x00\x33\x4d\x34\xc5\x8b\x42\xad\xd5\xd9\xf4\x6c\x7a\x92\xf3\xf8\x6e\x2d\x0b\x24\x66\xb1\x9b\x71\x54\x94\xb0\x5b\x20\x31\x9d\x43\x92\x72\x06\x81\xde\x09\x3c\x87\xa4\x40\x39\x8e\x05\xcb\x21\xd8\x48\xbc\x9e\xc3\x0c\x69\x94\x34\xa3\xe7\x2b\xa4\xf0\xab\x17\x13\xf2\xdb\x77\xef\x3f\x6c\xa7\xff\xf7\x63\xce\xe7\xb0\x07\xa8\xf4\x8e\x62\xb5\xc1\x58\xd7\x28\x14\xa3\x35\xc5\xfa\x2f\x15\x57\x4f\x51\xaa\x14\x04\x71\xc5\xaa\x52\x49\x84\x06\x4a\xa6\x43\xa4\x7f\x29\xb8\x98\xc5\x8e\xe6\x20\x06\xc9\x35\xd2\x38\x7b\x87\xe4\x2d\x96\x83\xec\x46\xc1\xca\x62\x8d\xef\x75\x6c\xb4\x71\x73\xc0\x7a\x76\x02\x56\x3c\xdb\x81\x87\x6a\x08\x80\x0d\x26\xf9\x46\x27\xe0\x74\x3a\xfd\xe2\xbc\x19\x2d\x90\xcc\x09\x4b\xc0\xb4\x1d\x12\x28\xcb\x08\xcb\xbd\xb1\xc7\xcf\xaa\x87\x0e\x64\x46\x94\xa0\x68\x97\x80\x35\xc5\xf7\x2d\x80\x79\x3b\xc9\x88\xc4\xa9\x26\x9c\x25\x20\xe5\xb4\x2c\x58\x0f\xec\x7f\x0a\x24\x3c\xb0\x15\x4a\x6f\x73\xc9\x4b\x96\x9d\xa4\x9c\x72\x99\x80\x5c\xa2\x5d\x07\x35\x97\x7c\x9b\x80\xd3\x3e\x16\xe5\x28\x3b\x09\x01\x05\x57\xc4\x29\x80\x56\x8a\xd3\x52\xe3\x16\x6c\xc5\xb5\xe6\x45\x60\x36\xc5\x6b\x1d\x0c\x7c\x3c\x21\x2c\xc3\xf7\x09\x38\x7d\x31\xe4\x9c\xe8\x25\x2e\xda\xf1\x4a\xe5\x15\x45\xe9\xed\xf9\x1e\x9b\x24\xce\x3c\x93\x38\xd3\x27\x8a\x7c\xc4\x09\x38\xf3\xc1\xec\xf8\xb6\x5a\xaf\x15\xa7\x59\xdf\xde\x4d\x99\xf9\xa6\xd6\x5a\x9d\xfa\x30\x26\x2e\x4e\x10\x25\xb9\x59\x03\xcc\x34\x96\x3d\x7d\xb7\x1b\xe2\xbb\xc5\x53\xe8\x34\xb4\xaf\x6f\x49\x60\x6a\xa8\x98\x12\x88\x45\x77\x88\x96\xb8\xaf\xe3\x89\x74\x66\x75\xfc\xe7\xbb\x22\x9a\xb6\x33\x8f\x35\xae\xc6\x14\x0b\x2e\xf5\x89\xe0\xa2\x14\x40\x0c\x58\x3f\x8d\x02\x2f\x0e\x84\xf6\xd3\x1e\x79\x5a\x0e\x45\x2b\x4c\xf7\xd9\x71\xd6\xd5\x76\x16\xdb\xdd\xb9\xf8\xcc\xdf\xe9\xf5\xde\x84\xa5\xc2\x40\x69\x49\x52\x0d\xcf\x6b\xaf\x51\xac\xc1\xa6\x6c\x96\xd9\xbc\x16\x48\x84\xaf\x26\x13\xf4\x47\xae\x2b\x75\xfb\x33\x3f\xa7\x9c\xf9\xa3\xd6\x1e\x7f\x60\xab\x82\x69\x8a\x18\x5e\xf6\x88\x6a\x77\xf4\x67\xd6\x9c\x52\xbe\x5d\x5a\x3e\x30\x07\x6b\x44\x15\xf6\xe7\x29\x52\x7a\x29\x2d\x33\x98\x83\x87\xc7\xc6\xd8\x8c\xa7\x65\x81\x99\x8e\x38\xbb\xc5\xbb\x52\x18\xe6\x92\xd9\x5c\x31\xc2\x77\x98\xe9\xb1\xe7\x6d\x40\xd6\xc0\x8d\x46\xb7\x78\x07\xe6\xf3\x39\x80\x6f\x55\x8a\x04\x86\x63\x8f\x0a\x00\xcd\xf3\x9c\xe2\xa5\xd3\x6a\x34\x6e\xd7\xbc\x59\xda\x26\x46\x6b\x69\x80\x0b\xcc\x96\x84\x2d\x73\xce\x0d\x6f\x81\x84\x1a\xf9\xc2\xef\x90\x04\xa5\xa4\x60\x0e\xe0\x46\x6b\xa1\x92\x38\xde\x6e\xb7\x91\x23\x8f\x52\x5e\xc4\x86\x25\xfe\x16\x82\x2f\x7d\x73\x23\x8a\x34\xd1\x65\x86\xc1\x97\x00\x4e\x7a\x93\x9c\xe5\xe1\x6c\x81\x44\x94\x63\xfd\x0f\xce\x8b\xd1\xd8\x8c\x7e\x84\x8d\x0a\x5b\xc2\x32\xbe\x8d\x8c\xa6\xa3\x52\xd2\xc9\xb3\xe5\x8a\x22\x76\xfb\x6c\xdc\xdb\x79\x8d\x55\xa5\xc8\x90\xc6\xef\x90\x18\x15\x2a\x0f\x7c\x69\x0d\x12\x5c\x81\x39\xb8\x30\x4a\x5e\xb0\xdc\xd0\x34\xfa\x4e\x80\x7d\xab\x15\xf4\x9d\x58\x05\x55\xa4\xb0\xbe\x70\x8c\x82\xab\x27\x08\x3e\x98\xc3\x8b\x70\xf6\x9a\xe5\x14\x5b\x01\xe6\x68\x27\x2c\x1f\x37\x31\x60\x37\x52\x1b\x71\x91\xe0\x2a\x22\x8c\x99\x78\xbe\x37\xe1\xf2\x4b\x59\xac\xb0\x34\x32\x8c\x72\xe3\x48\xf3\x1f\xc8\x3d\xce\x46\xaf\xc6\x8d\xd7\x7c\x12\x96\xfb\x24\xbe\x56\x71\xec\x8b\xc9\x8d\xab\xad\x9c\x9f\xae\xdf\x5d\x98\x75\x9d\x21\x77\xbe\xdf\x7c\x7a\x85\x2b\x65\x1a\x05\x2a\xc9\x7b\x96\xf1\x06\x2e\x1c\x92\x99\x53\xb3\x18\x2d\x60\xe0\x01\x13\xdb\xfe\x36\x0a\x17\x0b\x58\x44\x81\xd8\x35\xef\x39\xfb\xb1\x93\xb6\x86\x63\xe0\xa7\x5f\xdf\x74\x63\x60\x53\x66\x11\xa2\x6e\xb9\x03\x8f\x9b\x65\xaa\x27\xce\x03\xf2\x6a\xf1\x7a\xd4\xd5\x78\x48\x8c\x88\x54\x02\xe3\xac\x8f\x5d\x4d\x84\xe4\x77\x58\x6a\x92\x22\xba\x1c\x66\x0a\xa7\x43\xd6\x35\x45\x42\xf5\x38\xec\x68\x48\xa8\x25\x29\x7a\x74\x66\x30\x24\x93\x65\x96\x61\xb9\x1c\xa4\xf6\xe6\x7a\xfb\x6e\x6b\xb6\x13\xc3\x5b\xf0\x3b\x5e\x5d\xf1\xf4\x16\xeb\x11\xdc\x9a\x40\x32\x31\x51\x6d\x5f\xca\x53\xbb\x23\xa2\x0d\x57\x9a\xa1\xc2\xee\xfd\x64\x88\xc0\xa6\xcb\x2f\x01\x8c\xb7\x0a\x36\x2b\xbe\x55\x11\x67\x26\x05\xf8\xa9\xd2\x5f\xd5\x38\x4e\x39\x53\x9c\xe2\x88\xf2\xdc\x88\xb7\xa9\xad\x05\x78\x0c\x90\x52\xca\x15\x3e\x1c\xca\x92\x3f\x85\x55\x60\xa5\x50\x1e\xa0\xe1\x6e\x0a\x2d\x54\x0e\xe6\xe0\x7f\xaf\xde\xff\x12\x09\x24\x15\x1e\xe1\xc8\xdc\xc9\xbd\x80\xee\x0b\x35\x04\xd0\xe6\x23\x8f\x2c\x3c\x52\x0a\x95\x7b\xbb\x29\x8c\x78\x6f\xc2\x6c\x32\x73\x31\xfc\x7c\x3e\x07\x25\xcb\xf0\x9a\x30\x9c\x85\x3b\x2d\xcc\x98\xad\xbc\xc7\xd6\xe4\xee\x06\x23\x8c\x68\xc3\xd0\xb5\xb5\x93\x5d\x5f\x9e\x45\x2f\xbe\x3a\xfb\x6a\x72\x72\x1a\x7d\xf5\xf2\xec\xb9\xaf\x97\xa1\xe6\xaa\xa8\x82\xe7\x22\xba\x26\x14\x5f\xa0\x1d\x96\x23\x9b\x8a\x92\x38\x7e\x50\x8f\x91\x26\x14\xdb\xec\xaf\xb4\xc4\x58\x9b\x8c\xc0\x65\x1e\x3f\x7c\x7c\x8c\x1f\xee\x1f\xe3\x87\xdd\x63\x64\x4a\x9d\x49\x60\x4f\x81\xee\x4d\x16\x4a\xc0\xe9\xd7\x13\x7f\x98\x30\x37\x7c\xe6\x8f\xae\xb9\x2c\x90\x4e\x80\x57\x38\xf9\xd3\xaa\x5c\x65\xbc\x40\x84\xa9\x04\xfc\x01\xcd\x9a\xc0\x95\xf9\x93\xc2\x3f\x5b\x3f\x79\x3e\xb3\x66\x09\xcc\x10\x11\xcb\x14\xa5\x1b\x9c\x2d\x4d\xc5\x65\x56\xe0\x00\x4b\x4d\x9e\x8c\x2a\xf6\x88\x61\x1d\xe7\x98\x6f\xf1\xca\x02\xc5\x0a\xcb\x3b\x92\xe2\x58\x17\x2a\x3e\x8d\xa6\xd1\x34\xae\x05\x55\x12\xbe\x7d\x7b\x79\xf5\xe3\x17\xcf\x5f\x7f\x33\x9d\x7e\x73\xfa\xfc\x5b\xc1\x0e\x77\xd4\x8b\x41\x47\x05\xa3\xba\x50\x09\xd0\xb2\xc4\xfe\x60\x86\x35\x4e\xf5\x07\xac\x09\x43\xfd\x59\xdf\x79\xf0\xf4\x0c\x1e\xe1\x77\x2d\x11\x53\x02\x49\xcc\xb4\xc3\x7d\xd2\xdb\x4a\xa3\x02\xb3\xa5\xbd\x8f\x2f\xed\x85\xfe\x10\x4f\x3b\x2e\x7b\xc4\x69\xce\xb0\xfc\x9b\x87\x54\x65\xa4\xc6\x52\x22\xc2\x8e\x35\xd0\x71\xfd\x77\x98\xb8\x45\x1a\xcb\x23\x0d\xb4\x3c\xb6\x2e\xfb\x1b\xda\xe8\x15\x64\x6d\x0e\x30\xb9\x13\x16\x48\x74\xf4\xa3\xc6\x54\x83\x67\x53\xe3\x9f\xbe\x38\x57\xaf\x25\x26\xc3\xfa\xc3\x1f\x9d\x39\x53\x7f\x0c\x69\x2d\xc9\xaa\x34\x89\xfa\x7b\xce\xb4\xe4\x34\x71\xf5\xc9\xb0\x5e\xc6\xf9\x8e\xc5\xa6\xee\xd4\xb1\x44\x1e\xca\xe8\xa1\x6d\x26\x40\xd7\x3b\xa0\x78\xad\xa1\xbf\x84\x8e\x3c\x42\x59\xf6\xda\x63\x7c\xe2\x82\xe9\xa5\xb8\x1b\x08\x34\x92\x39\xd6\xf3\x1b\xe8\x2e\xf7\x37\x10\xd8\x02\x72\x7e\x03\x6f\xe0\xc2\x90\xbe\xfe\xf9\xd2\xde\x1e\x8f\x15\x97\xc4\xf6\xfe\xea\x85\xca\xa7\xa4\x5d\x59\xca\xff\x48\x98\x6f\x5b\x78\x5a\xa5\x5c\xec\x6c\xb9\xfc\x29\xe9\xff\xfa\x27\x78\x2f\x30\xbb\xb2\xdc\xef\x90\x30\x7a\x00\xbb\x1e\x46\x26\x97\x6a\x58\xa9\x6b\x6e\x4e\xf8\xee\x92\x9a\x43\xe1\x1d\x12\xe6\x3c\x0e\xaf\xd5\x30\x90\x01\x13\x13\x6b\x93\x90\xc2\xb9\x01\x5c\xbb\xc4\x01\x93\x4e\xfe\x79\x82\xda\xe4\xd1\x96\xd6\x4b\xc8\xc3\xf4\xbf\x9b\x5d\xdb\xd2\xdb\x4d\xdc\x52\xd6\xf7\xac\xf0\x64\xbd\xc3\x92\xa2\xdd\xb0\x59\xbf\xa0\x3b\x92\xdb\x6b\x24\xa2\xe0\x8d\xb9\x40\x25\x4f\x1c\xc5\x7d\x29\x00\x78\x91\xef\x76\xe1\xa8\x76\xe0\xc4\x17\x3b\x1e\x76\x78\xdb\x73\xb0\x7b\x88\xa4\x66\xd3\xf8\xa5\x4e\xca\xd9\xaf\x92\x26\xc0\x6b\x76\xda\xb4\xa2\x5c\x81\x16\x75\xb3\x8b\x61\xb8\xb2\xfd\xa0\x3f\x5e\xbd\x98\x80\x57\x2f\xbc\x64\xe0\x6f\x3b\x27\xd8\x0a\x75\x8f\xa6\x56\x0a\x93\x8a\x81\x4a\x3c\x0d\x7d\x31\xd2\xaf\x55\x13\x30\x1d\x9a\x7b\x2f\x89\x6d\x24\x41\x97\x82\xe0\x3e\x45\x02\xef\x74\xa6\x56\x84\x65\x97\xa6\x0e\x1d\x5d\x44\xb6\x1e\x1d\x3d\xa0\x52\xf3\x4b\xc4\xaa\xf4\xf4\x38\xee\xd4\xd7\xe6\xd5\x64\x30\xcc\xf4\xc8\xaf\x63\x4d\xd6\x1d\x77\xe3\xdd\x49\xb9\x0c\x2f\xa0\xd3\xc9\xb4\xa7\x48\xdd\x33\xf2\x9d\xd6\x30\x4f\xc0\x43\xdf\xaa\x9a\x63\x8f\x75\x0d\xc9\x81\x56\xd6\x66\x85\x0d\xa6\xc6\xb2\x1a\x5c\x61\xbd\x6c\x48\xba\xba\x76\x0e\x97\x88\xb3\xd1\xb3\x94\x92\xf4\xf6\xd9\xe4\x89\x72\x64\x18\x10\x1b\x6f\x51\x16\x5c\xfd\xf7\x34\x58\x86\x20\x2a\x00\x4f\x54\xc7\x2d\xed\xc2\xf6\x64\x75\x5c\x90\x0b\x55\x35\x4f\xe7\xc0\xd1\x1a\xf5\x9a\xfe\xc6\xd7\x63\xaf\xad\xe4\x66\x59\xee\xcd\x9e\x07\x95\x8f\xdf\x79\xaa\xcb\xfb\xd0\x21\x1d\xe9\x4d\x73\xa0\x55\xa1\x8f\x30\x50\x22\xf5\xbc\xd4\xe0\x6e\xb0\xc4\x9d\x12\xb3\xad\x94\x3a\x5e\xca\x1b\x2f\x75\x2e\x47\x5e\x0d\xa9\xb4\x24\x2c\x27\xeb\xdd\xc8\xb3\xa2\x93\x0a\xf5\x4e\x60\x98\x00\x58\x2b\x01\x3b\x19\x98\x22\x0d\x13\x60\xab\xd1\x1f\x28\x47\xbd\x30\x6c\xd6\x20\x52\x82\x12\x3d\x82\x13\x38\xfe\x63\xfa\xe7\xb8\x0b\xc3\xf2\xe3\x61\x4e\x7b\x30\xb5\x5b\xf7\x62\x85\x0b\x63\x82\x60\x1a\xbd\x9c\x0c\xf4\x84\x00\x18\xfb\x7d\xfe\xb6\xae\x0e\x8b\xdb\xad\x8a\x14\x66\x59\x30\x3a\xb0\x8a\x61\x5b\xd5\xf3\xf3\xfe\xe6\x95\x9f\xad\x1c\x55\xd0\x54\x81\x6e\xcc\x91\x41\x2f\x9c\x00\xa6\x0a\x1f\x85\x94\x71\xf6\xac\xee\x46\xf7\xf1\x9a\xa7\x4e\xbb\xfa\x73\xff\xbd\x67\x7e\xd3\xa2\x46\x59\xf6\xf6\x0e\x33\x7d\x41\x94\xc6\xcc\xdc\xc2\xdf\xbc\x7f\x57\xa5\xae\x0b\x8e\x32\x9c\xc1\xc9\x9e\xee\xb5\xa7\x7b\xe7\xb8\x36\x79\x2e\x69\xe5\xe4\x58\xbf\xa5\xd8\x3c\x7e\xb7\xfb\x39\x1b\x41\xcb\xe8\x7e\x82\x80\x41\xb4\x08\xae\x0e\x63\x3b\x11\x5c\x85\xac\x79\x81\xc4\x81\xbc\x86\x34\x64\x76\xee\x3a\x90\xdd\x11\xfb\x00\x8f\x4f\x65\xbb\xe3\xdc\x12\xfe\x38\x13\x6a\xa8\xca\x55\x41\xf4\xc1\xcc\x27\x8e\xbe\xe3\x22\xb1\xcf\xbb\x1d\x80\x5c\x74\x1c\x5c\xef\xd0\xc3\x21\x9a\x8d\x3f\xec\xaa\x4d\x99\x75\xfc\x73\x80\x88\x9a\x64\x69\xf3\x44\xa8\x61\xd5\xb2\xdd\xc3\x5d\x51\x0c\x31\xd7\x1d\xdc\x7d\xb2\x2b\x92\x21\xf6\xb0\x97\xbb\x07\x24\x24\x1c\x82\xb2\x4d\xde\x3d\x08\x76\x7e\x88\x51\x4b\x52\xec\x5b\x1d\x49\x8a\x21\x36\xaf\xfd\xbb\x87\xdb\xa3\xea\x83\x3c\x7a\x57\x95\x27\x7f\xaa\x6a\x9a\x8a\x4d\x42\xaa\x9e\xfc\x1f\xff\x67\x71\xfd\xa1\xc4\x6c\xc5\xb3\x5d\xf5\x3d\x40\x46\xee\x00\xc9\xe6\x70\x53\x66\xcd\x67\x00\x33\x25\x10\x5b\xbc\x6e\x96\xcd\xbe\x5b\xaa\xce\x3a\x81\x94\x22\xa5\xe6\xd0\xbd\x2d\xa6\xb3\xd8\x72\x56\xff\x42\xb4\x26\x00\x3d\xb4\x30\xe2\x8e\x40\xfb\xa9\x8e\xc7\x16\x2c\x0c\xc0\x23\xb0\x7e\x8b\xae\xba\x66\x0e\x46\xd2\x11\x90\x3f\xb8\x38\x6b\x01\xfd\xc0\x3a\x02\xe7\xda\x06\x4e\x0b\xe3\x85\xc8\x11\x28\x1f\xa2\x2e\x4e\x3f\xe2\x0e\x80\x9b\xc5\x19\xb9\xeb\x44\x8d\x49\xf7\x8b\xee\x84\xab\xcb\x61\xfd\x91\x07\xe3\x0c\x9f\xc3\x45\x1d\xc6\x0d\xaf\x7f\x54\x2d\x9a\x50\x9e\x89\xc5\x6c\xf3\xbc\x4b\x60\x0f\xa5\xc5\x2c\xde\x3c\x5f\xcc\x62\x11\x52\xaf\x4a\xad\x39\xeb\x71\xd8\xa3\x08\x70\x66\xef\xf5\x73\x38\xf8\x93\xed\xb9\xeb\x92\x00\xc2\x40\xf0\x7b\x9b\x83\x3c\x58\x54\x75\x6c\xb5\xc2\xba\x1b\xd5\xa8\xde\xc7\xac\xfc\xd6\xf5\x4b\xe7\xac\x0a\x35\x70\x1f\x15\xac\xb9\xec\xd2\xd9\x53\x65\xf1\xe3\xe5\x55\x32\x8b\x2d\xd1\x62\x46\x98\x28\xb5\xf7\xa9\x0f\x1c\x80\x77\x6c\x3d\x43\x9f\x16\x83\xa8\x86\xed\x66\x3e\x4e\x56\x73\x6a\x3d\xe9\x59\x07\xe0\x5e\x06\x21\xaa\xc3\xd7\x73\x75\x58\x2d\x9c\xc3\x45\x3d\xf2\x29\x97\x37\x61\x3b\x8b\x5d\x3e\x9c\xc5\xee\x93\xb2\x7f\x07\x00\x00\xff\xff\x16\xae\x39\xa5\x6a\x26\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 9834, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

