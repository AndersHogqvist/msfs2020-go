// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x59\x6d\x73\xdb\x36\x12\xfe\xec\xfc\x0a\x14\x37\x77\x96\xa6\x32\x29\xa7\x69\xe6\x4e\x96\x34\xd7\x36\x49\xd3\x3b\xa7\xce\xc4\x6e\x6e\xee\xda\x8e\x07\x22\x57\x14\x6a\x10\xc0\x00\xa0\x65\xc5\xa3\xff\x7e\x03\xf0\x0d\x20\x69\x55\xfe\x24\x11\xd8\x7d\xf6\x15\xbb\x0b\x72\xfe\xd5\x9b\xab\x1f\x6e\xfe\xfb\xf1\x2d\xda\x98\x9c\x2d\x5f\xcc\xcb\x1f\x84\xe6\x1b\x20\xa9\xfd\x83\xd0\xdc\x50\xc3\x60\x99\xeb\xb5\x7e\x39\x7d\x39\x3d\xcb\x44\x7c\xbf\x56\x39\x91\xf3\xb8\xdc\x29\xa9\x18\xe5\x77\x48\x01\x5b\x60\x9a\x08\x8e\x91\xd9\x49\x58\x60\x9a\x93\x0c\x62\xc9\x33\x8c\x36\x0a\xd6\x0b\x9c\x12\x43\x66\xcd\xea\xc5\x8a\x68\x78\xfd\x6a\x42\x3f\x7f\x7f\xf5\x69\x3b\xfd\xf7\x8f\x99\x58\xe0\x1e\xa0\x36\x3b\x06\x7a\x03\x60\x6a\x14\x06\x64\xcd\xc0\xfc\xa1\xe3\xea\x5f\x94\x68\x8d\x51\x5c\xb1\xea\x44\x51\x69\x90\x56\xc9\x10\xe9\x1f\x1a\x2f\xe7\x71\x49\x73\x14\x83\x12\x86\x18\x48\x3f\x10\x75\x07\x6a\x90\xdd\x2a\x58\x59\x6c\xe0\xc1\xc4\x56\x9b\x72\x0f\x39\xcf\x4e\xd0\x4a\xa4\x3b\xf4\x58\x2d\x21\xb4\x01\x9a\x6d\xcc\x0c\x9d\x4f\xa7\x7f\xbd\x68\x56\x73\xa2\x32\xca\x67\x68\xda\x2e\x49\x92\xa6\x94\x67\xde\xda\xfe\x45\xf5\xa7\x03\x99\x52\x2d\x19\xd9\xcd\xd0\x9a\xc1\x43\x0b\x60\x9f\xce\x52\xaa\x20\x31\x54\xf0\x19\x4a\x04\x2b\x72\xde\x03\xfb\x4b\x4e\xa4\x07\xb6\x22\xc9\x5d\xa6\x44\xc1\xd3\xb3\x44\x30\xa1\x66\x28\x53\x64\xd7\x41\xcd\x94\xd8\xce\xd0\x79\x1f\x8b\x09\x92\x9e\x85\x80\x52\x68\x5a\x2a\x40\x56\x5a\xb0\xc2\x40\x0b\xb6\x12\xc6\x88\x3c\x30\x9b\xc1\xda\x04\x0b\x5f\xce\x28\x4f\xe1\x61\x86\xce\x5f\x0d\x39\x27\xfa\x16\xf2\x76\xbd\x52\x79\xc5\x48\x72\x77\x71\xc0\x26\x05\xa9\x67\x92\xe0\xe6\x4c\xd3\x2f\x30\x43\x2f\x7d\x30\xb7\xbe\xad\xe2\xb5\x12\x2c\xed\xdb\xbb\x29\x52\xdf\xd4\x5a\xab\x73\x1f\xc6\xe6\xc5\x19\x61\x34\xb3\x31\x00\x6e\x40\xf5\xf4\xdd\x6e\xa8\xef\x16\x4f\xa1\xf3\xd0\xbe\xbe\x25\x81\xa9\xa1\x62\x5a\x12\x1e\xdd\x13\x56\x40\x5f\xc7\x33\x55\x9a\xd5\xf1\x9f\xef\x8a\x68\xda\xee\xec\x6b\x5c\x03\x0c\xa4\x50\xe6\x4c\x0a\x59\x48\x24\x07\xac\x9f\x46\x81\x17\x07\x52\xfb\x69\x8f\x3c\x2d\x87\x91\x15\xb0\x43\x76\xbc\xec\x6a\x3b\x8f\xdd\xe9\x5c\xbe\xf0\x4f\x7a\x7d\x36\x71\xa1\x01\x69\xa3\x68\x62\xf0\x45\xed\x35\x06\x06\x6d\x8a\x26\xcc\xf6\x31\x27\x32\x7c\xb4\x95\xa0\xbf\x72\x53\xa9\xdb\xdf\xf9\x29\x11\xdc\x5f\x75\xf6\xf8\x0b\x5b\x1d\x6c\x33\xc2\xe1\xb6\x47\x54\xbb\xa3\xbf\xb3\x16\x8c\x89\xed\xad\xe3\x43\x0b\xb4\x26\x4c\x83\xbf\xcf\x88\x36\xb7\xca\x31\xa3\x05\x7a\xdc\x37\xc6\xa6\x22\x29\x72\xe0\x26\x12\xfc\x0e\x76\x85\xb4\xcc\x05\x77\xb5\x62\x04\xf7\xc0\xcd\xd8\xf3\x36\xa2\x6b\x54\xae\x46\x77\xb0\x43\x8b\xc5\x02\xe1\xb7\x3a\x21\x12\xf0\xd8\xa3\x42\xc8\x88\x2c\x63\x70\x5b\x6a\x35\x1a\xb7\x31\x6f\x42\xdb\xe4\x68\x2d\x0d\x09\x09\xfc\x96\xf2\xdb\x4c\x08\xcb\x9b\x13\xa9\x47\xbe\xf0\x7b\xa2\x50\xa1\x18\x5a\x20\xbc\x31\x46\xea\x59\x1c\x6f\xb7\xdb\xa8\x24\x8f\x12\x91\xc7\x96\x25\xfe\x27\x46\x5f\xfb\xe6\x46\x8c\x18\x6a\x8a\x14\xd0\xd7\x08\x4f\x7a\x9b\x82\x67\xe1\x6e\x4e\x64\x94\x81\xf9\x9f\x10\xf9\x68\x6c\x57\xbf\xe0\x46\x85\x2d\xe5\xa9\xd8\x46\x56\xd3\x51\xa1\xd8\xe4\xf4\x76\xc5\x08\xbf\x3b\x1d\xf7\x4e\x5e\x63\x55\x21\x53\x62\xe0\x03\x91\xa3\x5c\x67\x81\x2f\x9d\x41\x52\x68\xb4\x40\x97\x56\xc9\x4b\x9e\x59\x9a\x46\xdf\x09\x72\x4f\xb5\x82\xbe\x13\xab\xa4\x8a\x34\x98\xcb\x92\x51\x0a\xfd\x04\xc1\x27\xdb\xbc\xa8\xe0\xdf\xf1\x8c\x81\x13\x60\x5b\x3b\xe5\xd9\xb8\xc9\x01\x77\x90\xda\x8c\x8b\xa4\xd0\x11\xe5\xdc\xe6\xf3\x83\x4d\x97\x9f\x8b\x7c\x05\xca\xca\xb0\xca\x8d\x23\x23\xde\xd1\x07\x48\x47\xaf\xc7\x8d\xd7\x7c\x12\x9e\xf9\x24\xbe\x56\x71\xec\x8b\xc9\xac\xab\x9d\x9c\xf7\x37\x1f\x2e\x6d\x5c\xe7\xa4\xec\xef\xbf\xfd\x79\x84\x2b\x65\x1a\x05\x2a\xc9\x07\xc2\xf8\x1b\x5e\x96\x48\x76\x4f\xcf\x63\xb2\xc4\x81\x07\x6c\x6e\xfb\xc7\x28\x0c\x16\x72\x88\x92\xf0\x1b\xd1\x73\xf6\xbe\x53\xb6\x86\x73\xe0\xfd\x2f\x6f\xba\x39\xb0\x29\xd2\x88\xb0\x32\xdc\x81\xc7\x6d\x98\xea\x8d\x8b\x80\xbc\x0a\x5e\x8f\xba\x5a\x0f\x89\x09\x55\x5a\x02\xa4\x7d\xec\x6a\x23\x24\xbf\x07\x65\x68\x42\xd8\xed\x30\x53\xb8\x1d\xb2\xae\x19\x91\xba\xc7\xe1\x56\x43\x42\xa3\x68\xde\xa3\xb3\x8b\x21\x99\x2a\xd2\x14\xd4\xed\x20\xb5\xb7\xd7\x3b\x77\x5b\x7b\x9c\x38\x6c\xd1\x7f\x60\x75\x2d\x92\x3b\x30\x23\xbc\xb5\x89\x64\x73\xa2\x3a\xbe\x4c\x24\xee\x44\x44\x1b\xa1\x0d\x27\xb9\x3b\xfb\xb3\x21\x02\x57\x2e\xbf\x46\x38\xde\x6a\xdc\x44\x7c\xab\x23\xc1\x6d\x09\xf0\x4b\xa5\x1f\xd5\x38\x4e\x04\xd7\x82\x41\xc4\x44\x66\xc5\xbb\xd2\xd6\x02\xec\x03\xa4\x84\x09\x0d\xc7\x43\x39\xf2\xa7\xb0\x72\xd0\x9a\x64\x01\x1a\x74\x4b\x68\xae\x33\xb4\x40\xff\xba\xbe\xfa\x39\x92\x44\x69\x18\x41\x64\x67\x72\x2f\xa1\xfb\x42\x2d\x01\x76\xf5\xc8\x23\x0b\x5b\x4a\xae\x33\xef\x34\x85\x19\xef\x6d\xd8\x43\x66\x07\xc3\xaf\x16\x0b\x54\xf0\x14\xd6\x94\x43\x1a\x9e\xb4\xb0\x62\xb6\xf2\xf6\xad\xc9\xdd\x03\x46\x39\x35\x96\xa1\x6b\x6b\xa7\xba\x4e\x27\x68\x3a\xf6\x47\x12\xe9\x76\x73\x22\x47\xa7\x39\x91\xa7\x63\x5b\x2f\x3f\x53\xd8\xda\x13\x3e\x41\xe7\x2f\xc7\x17\x2f\x4e\x4e\x4e\x4e\x2e\x23\x43\x19\x5c\x92\x1d\xa8\xd1\x69\x5d\x99\x1e\xf5\xde\x2d\xbb\x6e\xa0\x8d\x02\x30\xb6\x42\x08\x95\xc5\x8f\x5f\xf6\xf1\xe3\xc3\x3e\x7e\xdc\xed\x23\xc9\xb3\xd3\x09\x7a\x74\x38\x27\x39\x79\xb0\x05\x69\x86\xce\xff\x31\x29\x57\x88\x31\x8a\xae\x8a\x72\x32\x3e\xfd\x5b\x22\xe4\xee\x02\xd5\x65\x30\xa8\x82\x7d\x31\x96\xd8\xcd\x3d\x78\x79\x25\x81\x5f\xbb\xcd\x0f\xf6\x5e\x46\x96\x28\x11\xbc\x44\x16\x4a\x9f\x4e\x3c\xf7\x2a\xe0\x29\x28\x50\x33\x74\x19\x25\x84\xdf\x13\x3d\x1a\x97\xca\xec\xc7\x11\x49\xd3\x1b\x61\x03\xe4\xc7\xac\x9d\x60\x9c\xbb\xec\xf5\x6e\xe4\x07\xcc\x2e\xfc\xa2\xd8\x0c\x79\x57\x27\x77\xc3\xd3\x65\xb9\xb7\x3e\xc0\x93\x0e\xc3\xb5\x9b\x2e\x7f\x7d\xfd\x6a\x82\x5e\xbf\xfa\xbd\xdd\xdd\x07\x01\xb2\x82\xab\x18\xd9\xbf\x65\x5c\xba\xb2\x67\x9e\x86\x81\xa5\x7e\xe7\x9b\xa1\xe9\xd0\xde\x95\xa2\x6e\x2c\xc5\xe5\x00\x8a\x0f\x29\x12\x78\xa7\xb3\xb5\xa2\x3c\xfd\x68\xbb\xda\xe8\x32\x72\xdd\x6d\xf4\x48\x0a\x23\x3e\x12\x3e\x2b\x87\xb1\xfd\xb8\xd3\xad\xed\xe3\x0f\x82\x1b\xe0\x66\xe4\x77\xc5\x9c\x50\x3e\xee\xbb\xbf\x1e\x2d\xfb\xde\xe8\x2b\x5a\xd3\x1e\x50\xb8\x21\x39\x52\xf1\x5a\xd3\x70\x02\x6d\x94\xad\xc1\x35\x98\xdb\x86\xa4\xd5\x32\x34\x47\x46\x82\x8f\x4e\x13\x46\x93\xbb\xd3\xc9\x13\x95\x6a\x18\x0a\xec\x49\x66\x3c\xa8\x0a\x07\x66\xaf\x21\x88\x0a\xc0\x13\xd5\x71\x48\x1b\xa5\x9e\xac\x8e\xf1\x99\xd4\xd5\xbd\x6a\x81\x4a\x5a\xab\x5e\x33\xfa\xfc\x7d\xec\x4d\x9c\xe5\x2e\xcf\xbc\xdd\x8b\xa0\x28\xfa\x43\x69\xdd\xf9\x43\x87\x74\xa4\x37\x73\x43\xab\x42\x1f\x61\xa0\x7a\xf6\xbc\xd4\xe0\x6e\x40\x41\xa7\xfb\xb4\x45\xb4\xe3\xa5\xac\xf1\x92\x67\x47\xa7\xbd\xd8\x7b\x15\xcf\xe8\x7a\x37\xf2\xac\x08\x67\x2a\x6c\x76\x12\xf0\x0c\xe1\x5a\x89\xa0\x4e\x20\x84\x19\x31\x78\x86\x5c\xa3\x7a\xc7\x04\xe9\x25\x60\x13\x83\x48\x4b\x46\xcd\x08\x4f\xf0\xf8\xd7\xe9\xef\xe3\x2e\x0c\xcf\x9e\x0f\x73\xde\x83\xa9\xdd\x7a\x10\x2b\x0c\x8c\x4d\x82\x69\xf4\xed\x64\x60\x5c\x44\x68\xec\xbf\x02\x68\x5b\x6e\xd8\xf7\xb6\x3a\xd2\xc0\xd3\x60\x75\x20\x8a\xe1\x8d\xcb\xf3\xf3\xe1\xb9\xd6\x2f\x3d\x25\x55\x30\x6f\xe1\x72\xad\x24\xc3\x5e\x3a\x21\x60\x1a\x9e\x85\x94\x0a\x7e\x5a\x5f\x54\xfb\x78\xde\xbb\x87\xe0\x26\xfb\x95\xff\xec\x99\x7f\x72\x72\xd2\x5c\x5d\x49\x9a\xbe\xb5\x97\xd2\x4b\xaa\x0d\x70\x50\x23\xfc\xe6\xea\x43\x55\xb1\x2e\x05\x49\x21\xc5\x93\x03\xb7\x5a\x4f\x71\x7b\x37\x0e\x6e\x51\xb6\x37\x34\x72\x32\x30\x6f\x19\xd8\xbf\xdf\xef\x7e\x4a\x47\xd8\x31\x96\xaf\x26\x70\x90\x2a\x52\xe8\xe3\xd8\xce\xa4\xd0\x21\xab\xbd\x14\x1d\xc9\x6b\x49\x43\xe6\xd2\x57\x47\xb2\x97\xc4\x3e\xc0\xfe\xa9\x52\xf7\x3c\xb7\x84\x2f\x6d\x42\x0d\x75\xb1\xca\xa9\x39\x9a\xf9\xac\xa4\xef\xb8\x48\x1e\xf2\x6e\x07\x20\x93\x1d\x07\xd7\xc7\xf3\x78\x88\xe6\xd4\x0f\xbb\x6a\x53\xa4\x1d\xff\x1c\x21\xa2\x26\xb9\x75\x45\x22\xd4\xb0\xba\xca\x1d\xe0\xae\x28\x86\x98\xeb\x9b\xdd\x21\xd9\x15\xc9\x10\x7b\x78\xc7\x3b\x00\x12\x12\x0e\x41\xb9\xcb\xdf\x01\x04\xb7\x3f\xc4\x68\x2f\x76\x87\xa2\xa3\x68\x3e\xc4\xe6\x5d\x0b\x0f\x70\x7b\x54\x7d\x90\xbd\x37\xa7\xf4\x5e\x61\xd9\x11\xb9\xb9\x68\xb8\xc7\x7a\xf6\xf0\xbf\x06\xcc\xe3\xfa\xcb\xc9\x7c\x25\xd2\x5d\xf5\x81\x20\xa5\xf7\x88\xa6\x0b\xbc\x29\xd2\xe6\xbb\xc0\x5c\x4b\xc2\x97\xdf\x35\xf1\x72\xcf\x8e\xaa\x13\x20\x94\x30\xa2\xf5\x02\x97\x4f\xcb\xe9\x3c\x76\x9c\xd5\x4f\x88\xd6\x64\x9e\x87\x16\xa6\xda\x33\xd0\xde\xd7\x89\xd8\x82\x85\x99\xf7\x0c\xac\xcf\xd1\x75\xd7\xcc\xc1\x14\x7a\x06\xe4\xbb\x32\xc1\x5a\x40\x3f\xa3\x9e\x81\x73\xe3\x32\xa6\x85\xf1\x72\xe3\x19\x28\x9f\xa2\x2e\x4e\x3f\xd5\x8e\x80\x9b\xc7\x29\xbd\xef\x64\x8d\xad\xf3\xcb\xee\x86\x7b\xab\xbd\xc0\xf5\x57\x1f\x2e\x38\x5c\xe0\x65\x9d\xbf\x0d\xaf\xdf\xa3\x96\x4d\x72\xcf\xe5\x72\xbe\xf9\xa6\x4b\xe0\xba\xd1\x72\x1e\x6f\xbe\x59\xce\x63\x19\x52\xaf\x0a\x63\x04\xef\x71\xb8\x1e\x84\x04\x77\xd3\xfc\x02\x0f\xbe\xc3\xbd\xc0\x4b\xf7\xba\x84\x72\x14\xbc\x80\x2b\x21\x8f\x16\x55\xf5\xab\x56\x58\xf7\x84\x5a\xd5\xfb\x98\x95\xdf\xba\x7e\xe9\x34\xa9\x50\x83\xf2\x2b\xc3\x5a\xa8\x2e\x9d\x6b\x27\xcb\x1f\x3f\x5e\xcf\xe6\xb1\x23\x5a\xce\x29\x97\x85\xf1\xbe\xfd\xe1\x01\xf8\x92\xad\x67\xe8\xd3\x62\x08\x33\xb8\x3d\xcc\xcf\x93\xd5\xb4\xab\x27\x3d\x5b\x02\x94\x0f\x83\x10\x55\xd7\xf5\x5c\x1d\xde\x11\x2e\xf0\xb2\x5e\xf9\x33\x97\x37\x69\x3b\x8f\xcb\x7a\x38\x8f\xcb\x6f\xcc\xff\x0f\x00\x00\xff\xff\xcf\x5a\x95\x68\x7b\x1e\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 7803, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

