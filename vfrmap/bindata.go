// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x72\xe3\x36\xb2\xfe\x9f\xa7\x40\x70\x2a\x35\x52\x45\x26\x65\xcf\x25\x09\x2d\xa9\x32\xc9\x4c\x2e\xe7\x78\x32\xae\xb1\x93\xd4\xd9\x38\xa5\x82\x48\x88\x42\x0c\x02\x28\x00\xb4\xac\x71\xf9\x81\xf6\x35\xf6\xc9\xb6\x00\xf0\x02\x90\xb4\x46\xda\x5f\xd9\x3f\x36\x09\x74\x7f\x7d\x41\xa3\x81\x6e\x71\xf6\xf9\x9b\xf7\xdf\x5f\xff\xff\xe5\x5b\xb0\xd1\x05\x5d\x7c\x36\x73\xff\x00\x98\x6d\x30\xca\xcc\x03\x00\x33\x4d\x34\xc5\x8b\x42\xad\xd5\xd9\xf4\x6c\x7a\x92\xf3\xf8\x6e\x2d\x0b\x24\x66\xb1\x9b\x71\x54\x94\xb0\x5b\x20\x31\x9d\x43\x92\x72\x06\x81\xde\x09\x3c\x87\xa4\x40\x39\x8e\x05\xcb\x21\xd8\x48\xbc\x9e\xc3\x0c\x69\x94\x34\xa3\xe7\x2b\xa4\xf0\xab\x17\x13\xf2\xdb\x77\xef\x3f\x6c\xa7\xff\xf7\x63\xce\xe7\xb0\x07\xa8\xf4\x8e\x62\xb5\xc1\x58\xd7\x28\x14\xa3\x35\xc5\xfa\x2f\x15\x57\x4f\x51\xaa\x14\x04\x71\xc5\xaa\x52\x49\x84\x06\x4a\xa6\x43\xa4\x7f\x29\xb8\x98\xc5\x8e\xe6\x20\x06\xc9\x35\xd2\x38\x7b\x87\xe4\x2d\x96\x83\xec\x46\xc1\xca\x62\x8d\xef\x75\x6c\xb4\x71\x73\xc0\x7a\x76\x02\x56\x3c\xdb\x81\x87\x6a\x08\x80\x0d\x26\xf9\x46\x27\xe0\x74\x3a\xfd\xe2\xbc\x19\x2d\x90\xcc\x09\x4b\xc0\xb4\x1d\x12\x28\xcb\x08\xcb\xbd\xb1\xc7\xcf\xaa\x87\x0e\x64\x46\x94\xa0\x68\x97\x80\x35\xc5\xf7\x2d\x80\x79\x3b\xc9\x88\xc4\xa9\x26\x9c\x25\x20\xe5\xb4\x2c\x58\x0f\xec\x7f\x0a\x24\x3c\xb0\x15\x4a\x6f\x73\xc9\x4b\x96\x9d\xa4\x9c\x72\x99\x80\x5c\xa2\x5d\x07\x35\x97\x7c\x9b\x80\xd3\x3e\x16\xe5\x28\x3b\x09\x01\x05\x57\xc4\x29\x80\x56\x8a\xd3\x52\xe3\x16\x6c\xc5\xb5\xe6\x45\x60\x36\xc5\x6b\x1d\x0c\x7c\x3c\x21\x2c\xc3\xf7\x09\x38\x7d\x31\xe4\x9c\xe8\x25\x2e\xda\xf1\x4a\xe5\x15\x45\xe9\xed\xf9\x1e\x9b\x24\xce\x3c\x93\x38\xd3\x27\x8a\x7c\xc4\x09\x38\xf3\xc1\xec\xf8\xb6\x5a\xaf\x15\xa7\x59\xdf\xde\x4d\x99\xf9\xa6\xd6\x5a\x9d\xfa\x30\x26\x2e\x4e\x10\x25\xb9\x59\x03\xcc\x34\x96\x3d\x7d\xb7\x1b\xe2\xbb\xc5\x53\xe8\x34\xb4\xaf\x6f\x49\x60\x6a\xa8\x98\x12\x88\x45\x77\x88\x96\xb8\xaf\xe3\x89\x74\x66\x75\xfc\xe7\xbb\x22\x9a\xb6\x33\x8f\x35\xae\xc6\x14\x0b\x2e\xf5\x89\xe0\xa2\x14\x40\x0c\x58\x3f\x8d\x02\x2f\x0e\x84\xf6\xd3\x1e\x79\x5a\x0e\x45\x2b\x4c\xf7\xd9\x71\xd6\xd5\x76\x16\xdb\xdd\xb9\xf8\xcc\xdf\xe9\xf5\xde\x84\xa5\xc2\x40\x69\x49\x52\x0d\xcf\x6b\xaf\x51\xac\xc1\xa6\x6c\x96\xd9\xbc\x16\x48\x84\xaf\x26\x13\xf4\x47\xae\x2b\x75\xfb\x33\x3f\xa7\x9c\xf9\xa3\xd6\x1e\x7f\x60\xab\x82\x69\x8a\x18\x5e\xf6\x88\x6a\x77\xf4\x67\xd6\x9c\x52\xbe\x5d\x5a\x3e\x30\x07\x6b\x44\x15\xf6\xe7\x29\x52\x7a\x29\x2d\x33\x98\x83\x87\xc7\xc6\xd8\x8c\xa7\x65\x81\x99\x8e\x38\xbb\xc5\xbb\x52\x18\xe6\x92\xd9\x5c\x31\xc2\x77\x98\xe9\xb1\xe7\x6d\x40\xd6\xc0\x8d\x46\xb7\x78\x07\xe6\xf3\x39\x80\x6f\x55\x8a\x04\x86\x63\x8f\x0a\x00\xcd\xf3\x9c\xe2\xa5\xd3\x6a\x34\x6e\xd7\xbc\x59\xda\x26\x46\x6b\x69\x80\x0b\xcc\x96\x84\x2d\x73\xce\x0d\x6f\x81\x84\x1a\xf9\xc2\xef\x90\x04\xa5\xa4\x60\x0e\xe0\x46\x6b\xa1\x92\x38\xde\x6e\xb7\x91\x23\x8f\x52\x5e\xc4\x86\x25\xfe\x16\x82\x2f\x7d\x73\x23\x8a\x34\xd1\x65\x86\xc1\x97\x00\x4e\x7a\x93\x9c\xe5\xe1\x6c\x81\x44\x94\x63\xfd\x0f\xce\x8b\xd1\xd8\x8c\x7e\x84\x8d\x0a\x5b\xc2\x32\xbe\x8d\x8c\xa6\xa3\x52\xd2\xc9\xb3\xe5\x8a\x22\x76\xfb\x6c\xdc\xdb\x79\x8d\x55\xa5\xc8\x90\xc6\xef\x90\x18\x15\x2a\x0f\x7c\x69\x0d\x12\x5c\x81\x39\xb8\x30\x4a\x5e\xb0\xdc\xd0\x34\xfa\x4e\x80\x7d\xab\x15\xf4\x9d\x58\x05\x55\xa4\xb0\xbe\x70\x8c\x82\xab\x27\x08\x3e\x98\xc3\x8b\x70\xf6\x9a\xe5\x14\x5b\x01\xe6\x68\x27\x2c\x1f\x37\x31\x60\x37\x52\x1b\x71\x91\xe0\x2a\x22\x8c\x99\x78\xbe\x37\xe1\xf2\x4b\x59\xac\xb0\x34\x32\x8c\x72\xe3\x48\xf3\x1f\xc8\x3d\xce\x46\xaf\xc6\x8d\xd7\x7c\x12\x96\xfb\x24\xbe\x56\x71\xec\x8b\xc9\x8d\xab\xad\x9c\x9f\xae\xdf\x5d\x98\x75\x9d\x21\x77\xbe\xdf\x7c\x7a\x85\x2b\x65\x1a\x05\x2a\xc9\x7b\x96\xf1\x06\x2e\x1c\x92\x99\x53\xb3\x18\x2d\x60\xe0\x01\x13\xdb\xfe\x36\x0a\x17\x0b\x58\x44\x81\xd8\x35\xef\x39\xfb\xb1\x93\xb6\x86\x63\xe0\xa7\x5f\xdf\x74\x63\x60\x53\x66\x11\xa2\x6e\xb9\x03\x8f\x9b\x65\xaa\x27\xce\x03\xf2\x6a\xf1\x7a\xd4\xd5\x78\x48\x8c\x88\x54\x02\xe3\xac\x8f\x5d\x4d\x84\xe4\x77\x58\x6a\x92\x22\xba\x1c\x66\x0a\xa7\x43\xd6\x35\x45\x42\xf5\x38\xec\x68\x48\xa8\x25\x29\x7a\x74\x66\x30\x24\x93\x65\x96\x61\xb9\x1c\xa4\xf6\xe6\x7a\xfb\x6e\x6b\xb6\x13\xc3\x5b\xf0\x3b\x5e\x5d\xf1\xf4\x16\xeb\x11\xdc\x9a\x40\x32\x31\x51\x6d\x5f\xca\x53\xbb\x23\xa2\x0d\x57\x9a\xa1\xc2\xee\xfd\x64\x88\xc0\xa6\xcb\x2f\x01\x8c\xb7\x0a\x36\x2b\xbe\x55\x11\x67\x26\x05\xf8\xa9\xd2\x5f\xd5\x38\x4e\x39\x53\x9c\xe2\x88\xf2\xdc\x88\xb7\xa9\xad\x05\x78\x0c\x90\x52\xca\x15\x3e\x1c\xca\x92\x3f\x85\x55\x60\xa5\x50\x1e\xa0\xe1\x6e\x0a\x2d\x54\x0e\xe6\xe0\x7f\xaf\xde\xff\x12\x09\x24\x15\x1e\xe1\xc8\xdc\xc9\xbd\x80\xee\x0b\x35\x04\xd0\xe6\x23\x8f\x2c\x3c\x52\x0a\x95\x7b\xbb\x29\x8c\x78\x6f\xc2\x6c\x32\x73\x31\xfc\x7c\x3e\x07\x25\xcb\xf0\x9a\x30\x9c\x85\x3b\x2d\xcc\x98\xad\xbc\xc7\xd6\xe4\xee\x06\x23\x8c\x68\xc3\xd0\xb5\xb5\x93\x5d\x5f\x9e\x45\x2f\xbe\x3a\xfb\x6a\x72\x72\x1a\x7d\xf5\xf2\xec\xb9\xaf\x97\xa1\xe6\xaa\xa8\x82\xe7\x22\xba\x26\x14\x5f\xa0\x1d\x96\x23\x9b\x8a\x92\x38\x7e\x50\x8f\x91\x26\x14\xdb\xec\xaf\xb4\xc4\x58\x9b\x8c\xc0\x65\x1e\x3f\x7c\x7c\x8c\x1f\xee\x1f\xe3\x87\xdd\x63\x64\x4a\x9d\x49\x60\x4f\x81\xee\x4d\x16\x4a\xc0\xe9\xd7\x13\x7f\x98\x30\x37\x7c\xe6\x8f\xae\xb9\x2c\x90\x4e\x80\x57\x38\xf9\xd3\xaa\x5c\x65\xbc\x40\x84\xa9\x04\xfc\x01\xcd\x9a\xc0\x95\xf9\x93\xc2\x3f\x5b\x3f\x79\x3e\xb3\x66\x09\xcc\x10\x11\xcb\x14\xa5\x1b\x9c\x2d\x4d\xc5\x65\x56\xe0\x00\x4b\x4d\x9e\x8c\x2a\xf6\x88\x61\x1d\xe7\x98\x6f\xf1\xca\x02\xc5\x0a\xcb\x3b\x92\xe2\x58\x17\x2a\x3e\x8d\xa6\xd1\x34\xae\x05\x55\x12\xbe\x7d\x7b\x79\xf5\xe3\x17\xcf\x5f\x7f\x33\x9d\x7e\x73\xfa\xfc\x5b\xc1\x0e\x77\xd4\x8b\x41\x47\x05\xa3\xba\x50\x09\xd0\xb2\xc4\x93\xe0\x7c\xc9\xb0\xc6\xa9\xfe\x80\x35\x61\xa8\x3f\xef\xbb\x0f\x9e\x9e\xc1\x23\x3c\xaf\x25\x62\x4a\x20\x89\x99\x76\xb8\x4f\xfa\x5b\x69\x54\x60\xb6\xb4\x37\xf2\xa5\xbd\xd2\x1f\xe2\x6b\xc7\x65\x0f\x39\xcd\x19\x96\x7f\xf3\xa0\xaa\x8c\xd4\x58\x4a\x44\xd8\xb1\x06\x3a\xae\xff\x0e\x13\xb7\x48\x63\x79\xa4\x81\x96\xc7\x56\x66\x7f\x43\x1b\xbd\x92\xac\xcd\x02\x26\x7b\xc2\x02\x89\x8e\x7e\xd4\x98\x6a\xf0\x6c\x72\xfc\xd3\x17\xe7\x2a\xb6\xc4\xe4\x58\x7f\xf8\xa3\x33\x67\xea\x8f\x21\xad\x25\x59\x95\x26\x55\x7f\xcf\x99\x96\x9c\x26\xae\x42\x19\xd6\xcb\x38\xdf\xb1\xd8\xe4\x9d\x3a\x96\xc8\x43\x19\x3d\xb4\xed\x04\xe8\xba\x07\x14\xaf\x35\xf4\x97\xd0\x91\x47\x28\xcb\x5e\x7b\x8c\x4f\x5c\x31\xbd\x24\x77\x03\x81\x46\x32\xc7\x7a\x7e\x03\xdd\xf5\xfe\x06\x02\x5b\x42\xce\x6f\xe0\x0d\x5c\x18\xd2\xd7\x3f\x5f\xda\xfb\xe3\xb1\xe2\x92\xd8\xde\x60\xbd\x50\xf9\x94\xb4\x2b\x4b\xf9\x1f\x09\xf3\x6d\x0b\xcf\xab\x94\x8b\x9d\x2d\x98\x3f\x25\xfd\x5f\xff\x04\xef\x05\x66\x57\x96\xfb\x1d\x12\x46\x0f\x60\xd7\xc3\xc8\xe4\x52\x0d\x2b\x75\xcd\xcd\x19\xdf\x5d\x52\x73\x2c\xbc\x43\xc2\x9c\xc8\xe1\xc5\x1a\x06\x32\x60\x62\x62\x6d\x12\x52\x38\x37\x80\x6b\x97\x38\x60\xd2\xc9\x3f\x4f\x50\x9b\x3c\xda\xd2\x7a\x09\x79\x98\xfe\x77\xb3\x6b\x5b\x7a\xbb\x89\x5b\xca\xfa\xa6\x15\x9e\xad\x77\x58\x52\xb4\x1b\x36\xeb\x17\x74\x47\x72\x7b\x91\x44\x14\xbc\x31\x57\xa8\xe4\x89\xc3\xb8\x2f\x05\x00\x2f\xf2\xdd\x2e\x1c\xd5\x0e\x9c\xf8\x62\xc7\xc3\x0e\x6f\xbb\x0e\x76\x0f\x91\xd4\x6c\x1a\xbf\xd8\x49\x39\xfb\x55\xd2\x04\x78\xed\x4e\x9b\x56\x94\x2b\xd1\xa2\x6e\x76\x31\x0c\x57\xb6\x23\xf4\xc7\xab\x17\x13\xf0\xea\x85\x97\x0c\xfc\x6d\xe7\x04\x5b\xa1\xee\xd1\x54\x4b\x61\x52\x31\x50\x89\xa7\xa1\x2f\x46\xfa\xd5\x6a\x02\xa6\x43\x73\xef\x25\xb1\xad\x24\xe8\x52\x10\xdc\xa7\x48\xe0\x9d\xce\xd4\x8a\xb0\xec\xd2\x54\xa2\xa3\x8b\xc8\x56\xa4\xa3\x07\x54\x6a\x7e\x89\x58\x95\x9e\x1e\xc7\x9d\x0a\xdb\xbc\x9a\x0c\x86\x99\x1e\xf9\x95\xac\xc9\xba\xe3\x6e\xbc\x3b\x29\x97\xe1\x15\x74\x3a\x99\xf6\x14\xa9\xbb\x46\xbe\xd3\x1a\xe6\x09\x78\xe8\x5b\x55\x73\xec\xb1\xae\x21\x39\xd0\xca\xda\xac\xb0\xc5\xd4\x58\x56\x83\x2b\xac\x97\x0d\x49\x57\xd7\xce\xe1\x12\x71\x36\x7a\x96\x52\x92\xde\x3e\x9b\x3c\x51\x90\x0c\x03\x62\xe3\x2d\xca\x82\xcb\xff\x9e\x16\xcb\x10\x44\x05\xe0\x89\xea\xb8\xa5\x5d\xd8\x9e\xac\x8e\x0b\x72\xa1\xaa\xf6\xe9\x1c\x38\x5a\xa3\x5e\xd3\xe1\xf8\x7a\xec\x35\x96\xdc\x2c\xcb\xbd\xd9\xf3\xa0\xf6\xf1\x7b\x4f\x75\x81\x1f\x3a\xa4\x23\xbd\x69\x0f\xb4\x2a\xf4\x11\x06\x8a\xa4\x9e\x97\x1a\xdc\x0d\x96\xb8\x53\x64\xb6\xb5\x52\xc7\x4b\x79\xe3\xa5\xce\xe5\xc8\xab\x22\x95\x96\x84\xe5\x64\xbd\x1b\x79\x56\x74\x52\xa1\xde\x09\x0c\x13\x00\x6b\x25\x60\x27\x03\x53\xa4\x61\x02\x6c\x3d\xfa\x03\xe5\xa8\x17\x86\xcd\x1a\x44\x4a\x50\xa2\x47\x70\x02\xc7\x7f\x4c\xff\x1c\x77\x61\x58\x7e\x3c\xcc\x69\x0f\xa6\x76\xeb\x5e\xac\x70\x61\x4c\x10\x4c\xa3\x97\x93\x81\xae\x10\x00\x63\xbf\xd3\xdf\x56\xd6\x61\x79\xbb\x55\x91\xc2\x2c\x0b\x46\x07\x56\x31\x6c\xac\x7a\x7e\xde\xdf\xbe\xf2\xb3\x95\xa3\x0a\xda\x2a\xd0\x8d\x39\x32\xe8\x85\x13\xc0\x54\xe1\xa3\x90\x32\xce\x9e\xd5\xfd\xe8\x3e\x5e\xf3\xd4\x69\x58\x7f\xee\xbf\xf7\xcc\x6f\x9a\xd4\x28\xcb\xde\xde\x61\xa6\x2f\x88\xd2\x98\x99\x5b\xf8\x9b\xf7\xef\xaa\xd4\x75\xc1\x51\x86\x33\x38\xd9\xd3\xbf\xf6\x74\xef\x1c\xd7\x26\xcf\x25\xad\x9c\x1c\xeb\xb7\x14\x9b\xc7\xef\x76\x3f\x67\x23\x68\x19\xdd\x8f\x10\x30\x88\x16\xc1\xd5\x61\x6c\x27\x82\xab\x90\x35\x2f\x90\x38\x90\xd7\x90\x86\xcc\xce\x5d\x07\xb2\x3b\x62\x1f\xe0\xf1\xa9\x6c\x77\x9c\x5b\xc2\x9f\x67\x42\x0d\x55\xb9\x2a\x88\x3e\x98\xf9\xc4\xd1\x77\x5c\x24\xf6\x79\xb7\x03\x90\x8b\x8e\x83\xeb\x1d\x7a\x38\x44\xb3\xf1\x87\x5d\xb5\x29\xb3\x8e\x7f\x0e\x10\x51\x93\x2c\x6d\x9e\x08\x35\xac\x9a\xb6\x7b\xb8\x2b\x8a\x21\xe6\xba\x87\xbb\x4f\x76\x45\x32\xc4\x1e\x76\x73\xf7\x80\x84\x84\x43\x50\xb6\xcd\xbb\x07\xc1\xce\x0f\x31\x6a\x49\x8a\x7d\xab\x23\x49\x31\xc4\xe6\x35\x80\xf7\x70\x7b\x54\x7d\x90\x47\xef\xaa\xf2\xe4\x8f\x55\x4d\x5b\xb1\x49\x48\xd5\x93\xff\xf3\xff\x2c\xae\x3f\x95\x98\xad\x78\xb6\xab\xbe\x08\xc8\xc8\x1d\x20\xd9\x1c\x6e\xca\xac\xf9\x10\x60\xa6\x04\x62\x8b\xd7\xcd\xb2\xd9\x77\x4b\xd5\x59\x27\x90\x52\xa4\xd4\x1c\xba\xb7\xc5\x74\x16\x5b\xce\xea\x5f\x88\xd6\x04\xa0\x87\x16\x46\xdc\x11\x68\x3f\xd5\xf1\xd8\x82\x85\x01\x78\x04\xd6\x6f\xd1\x55\xd7\xcc\xc1\x48\x3a\x02\xf2\x07\x17\x67\x2d\xa0\x1f\x58\x47\xe0\x5c\xdb\xc0\x69\x61\xbc\x10\x39\x02\xe5\x43\xd4\xc5\xe9\x47\xdc\x01\x70\xb3\x38\x23\x77\x9d\xa8\x31\xe9\x7e\xd1\x9d\x70\x75\x39\xac\x3f\xf3\x60\x9c\xe1\x73\xb8\xa8\xc3\xb8\xe1\xf5\x8f\xaa\x45\x13\xca\x33\xb1\x98\x6d\x9e\x77\x09\xec\xa1\xb4\x98\xc5\x9b\xe7\x8b\x59\x2c\x42\xea\x55\xa9\x35\x67\x3d\x0e\x7b\x14\x01\xce\xec\xbd\x7e\x0e\x07\x7f\xb4\x3d\x77\x5d\x12\x40\x18\x08\x7e\x71\x73\x90\x07\x8b\xaa\x8e\xad\x56\x58\x77\xa3\x1a\xd5\xfb\x98\x95\xdf\xba\x7e\xe9\x9c\x55\xa1\x06\xee\xb3\x82\x35\x97\x5d\x3a\x7b\xaa\x2c\x7e\xbc\xbc\x4a\x66\xb1\x25\x5a\xcc\x08\x13\xa5\xf6\x3e\xf6\x81\x03\xf0\x8e\xad\x67\xe8\xd3\x62\x10\xd5\xb0\xdd\xcc\xc7\xc9\x6a\x4e\xad\x27\x3d\xeb\x00\xdc\xcb\x20\x44\x75\xf8\x7a\xae\x0e\xab\x85\x73\xb8\xa8\x47\x3e\xe5\xf2\x26\x6c\x67\xb1\xcb\x87\xb3\xd8\x7d\x54\xf6\xef\x00\x00\x00\xff\xff\x1a\x73\xae\xfd\x6c\x26\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 9836, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

