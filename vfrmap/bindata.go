// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x98\xea\x70\xad\x83\xda\x92\x53\xf4\x0e\x0b\xd9\xca\x22\x4d\xd2\x6d\xb7\xd9\x26\x48\xb2\x2d\xfa\x14\xd0\xe2\x58\xe6\x9a\x22\x09\x92\xb2\xe3\x06\xfe\xee\x0b\x4a\xb2\x45\xc9\x4e\xe1\xf8\x45\xd2\x70\xe6\x37\x7f\x38\x9c\x19\x7a\xfc\xea\xe2\xfa\xfc\xfe\xc7\xcd\x25\xcc\x6c\xce\x4f\x8f\xc6\xd5\x03\x60\x3c\x43\x42\xdd\x0b\xc0\xd8\x32\xcb\xf1\x34\x37\x53\xf3\x6e\xf8\x6e\x38\xc8\x24\x2c\xa6\x3a\x27\x6a\x1c\x55\x2b\x15\x17\x67\x62\x0e\x1a\x79\x12\xb0\x54\x8a\x00\xec\x4a\x61\x12\xb0\x9c\x64\x18\x29\x91\x05\x30\xd3\x38\x4d\x02\x4a\x2c\x89\xb7\xd4\xd1\x84\x18\xfc\xff\xfb\x3e\xfb\xf6\xe1\xfa\x76\x39\xfc\xf2\x47\x26\x93\xa0\x06\x34\x76\xc5\xb1\x86\xb1\xf8\x68\xa3\xd4\x98\x7a\x0d\x4a\x73\xfb\x30\x91\x74\x05\x4f\x35\x09\x60\x86\x2c\x9b\xd9\x18\x4e\x86\xc3\xff\x8e\xb6\xd4\x9c\xe8\x8c\x89\x18\x86\x0d\x49\x11\x4a\x99\xc8\x3c\xda\xfa\xa8\x7e\xe9\x40\x52\x66\x14\x27\xab\x18\xa6\x1c\x1f\x1b\x00\xf7\x35\xa0\x4c\x63\x6a\x99\x14\x31\xa4\x92\x17\xb9\xd8\x01\xfb\x4f\x4e\x94\x07\x36\x21\xe9\x3c\xd3\xb2\x10\x74\x90\x4a\x2e\x75\x0c\x99\x26\xab\x0e\x6a\xa6\xe5\x32\x86\x93\x5d\x2c\x2e\x09\x1d\xb4\x01\x95\x34\xac\x32\x80\x4c\x8c\xe4\x85\xc5\x06\x6c\x22\xad\x95\x79\xcb\x6d\x8e\x53\xdb\x22\xfc\x1c\x30\x41\xf1\x31\x86\x93\xf7\xfb\x82\x13\xfe\x0f\xf3\x86\x5e\x9b\x3c\xe1\x24\x9d\x8f\x7e\xe1\x93\x46\xea\xb9\x24\x85\x1d\x18\xf6\x13\x63\x78\xe7\x83\x95\xf4\x65\xbd\x5f\x13\xc9\xe9\xae\xbf\xb3\x82\xfa\xae\x6e\xac\x3a\xf1\x61\x5c\x5e\x0c\x08\x67\x99\xdb\x03\x14\x16\xf5\x8e\xbd\xcb\x19\xf3\xc3\xe2\x19\x74\xd2\xf6\x6f\xd7\x93\x96\xab\x6d\xc3\x8c\x22\x22\x5c\x10\x5e\xe0\xae\x8d\x03\x5d\xb9\xd5\x89\x9f\x1f\x8a\x70\xd8\xac\xac\xab\x74\x8f\xca\x7c\xdf\xe4\x7e\xaa\x99\xb2\x9b\x64\x0f\x0a\x83\x60\xac\x66\xa9\x0d\x46\x1b\x33\x38\x5a\xc8\x89\x1a\xb5\x3e\xf5\xbc\x89\x40\x43\xf9\x9c\x4a\xe1\x53\x97\xa6\x85\x42\x0a\x2b\xcf\xcb\xe0\x41\x02\x56\x17\xdb\x68\x51\x99\x16\x39\x0a\x1b\x4a\x31\xc7\x55\xa1\x20\x81\x69\x21\xca\x94\xef\xe1\x02\x85\x3d\xf6\x9c\x07\x36\x85\x8a\x1a\xce\x71\x05\x49\x92\x40\x70\x69\x52\xa2\x30\x38\xf6\xb8\xe0\x79\x75\xdb\x58\x78\xc1\xde\xe8\x83\x42\x51\x62\xf1\x2f\xa2\x7a\xb9\xc9\x5a\x7a\x4b\xc5\x8d\xa3\xa1\x96\x96\x94\x22\xaf\x12\xc8\x4d\x16\xba\x4a\xc6\x44\x47\x06\x60\x9f\x44\x4b\x60\xb4\x87\x3d\x34\x68\x9d\x88\xa7\xef\xd8\xe7\xdb\xda\xed\x7e\x0b\xa2\xdd\x09\x85\x04\x04\x2e\x21\x93\x32\xe3\x18\xe6\x44\x99\xf0\x8a\xd8\x2b\x91\xf5\x9e\x80\x13\x1b\x97\x3a\x39\xb1\xcc\x16\x14\xfb\xc0\x5d\x92\x97\x24\x29\xb2\x92\x06\xeb\x96\x8e\xc6\x92\x9b\xfa\xf8\xf7\x94\x34\xc7\xa3\xa3\x4e\x48\x9a\x38\x77\x5d\x8f\xa2\x9c\x28\x07\x50\x2d\xd7\xe2\x6d\x6f\x55\xa8\x88\xb8\x97\x3b\x6b\xeb\xa3\xf6\x73\xff\x3e\x7d\xfa\xfb\xa2\xbb\x4f\x2e\x1a\xc8\x21\x69\xb2\x2a\x43\x7b\xc9\xd1\xbd\x7e\x58\x7d\xa6\xbd\x80\xf0\x2a\x06\x0f\xe5\xb9\x0a\x3c\xb5\xc8\x43\x26\x04\xea\x7b\x7c\xb4\xf5\x26\x6d\x98\x3d\xb7\x7f\x8d\x5e\xef\xea\x41\xe0\xdb\x0c\x38\x10\x9b\x30\x6d\x14\x22\x3d\xcc\xf2\x9a\xf9\x60\xf4\x05\x6a\xcb\x52\xc2\x1f\x0e\xd7\xd1\x16\x39\x58\xd3\x94\x13\x65\x0e\x52\x50\x72\x1e\x8c\x6b\x35\xcb\x0f\x82\x75\x8c\x07\xa3\xea\x82\x52\xd4\x0f\x07\x83\x7b\xfc\x3b\x45\x7d\xb9\x39\xa6\xdf\x71\x72\x27\xd3\x39\xda\x5e\xb0\x34\x71\x14\x05\xf0\x16\x96\x4c\x50\xb9\x0c\xb9\x4c\xcb\x32\x11\xce\xa4\xb1\x82\xe4\x08\x6f\x21\x88\xf7\x31\x28\xa9\xad\x5b\x8c\x96\xa6\xb1\x69\x69\x42\x29\xa4\x42\xe1\x97\x51\xff\x84\x44\x51\x2a\x85\x91\x1c\x43\x2e\x33\xa7\x1e\x1c\x77\x03\xb0\x6e\x21\xa5\x5c\x1a\x3c\x1c\xaa\x64\x7f\x0e\x2b\x47\x63\x48\xd6\x42\xc3\xee\xd9\xcd\x4d\x06\x09\xfc\x79\x77\xfd\x35\x54\x44\x1b\xec\x61\xe8\x66\x39\x2f\xe4\xbb\x4a\x1d\x43\xd0\x77\xa2\x7e\x79\x6a\x97\x08\x6f\xa1\x2a\xe4\x0a\x5e\x25\x09\x14\x82\xe2\x94\x09\xa4\xed\xe2\xd5\x6e\x03\x8d\xee\x75\xe3\x57\xb7\x22\x31\xc1\xac\x13\xe8\x3a\x74\x48\x69\x1e\xd6\xf5\x78\xd8\xaa\xc1\xce\xc6\x5d\x49\xa7\xe3\xd9\x5c\xcd\x89\x0a\x8e\xfb\xf0\x54\x4f\x29\xb1\xd3\xde\x87\x9f\xd2\x4d\x68\x27\xef\x4b\xf4\x2d\xbc\x0f\x5a\x35\x54\x42\xe9\x15\x33\x16\x05\x6a\x17\xa0\x3e\xbc\xa1\x9a\x64\x28\xe8\x9b\xfe\xfe\xfd\xef\x74\xd9\x29\xe1\xc6\x6b\xb3\x2d\x6d\x4d\x27\x83\x04\x9e\x40\x11\x3b\x8b\x5b\x26\xdc\xad\xf2\x89\xe4\x37\xc4\xce\xc2\x8f\xd7\xb7\xdf\xcf\x6e\x2f\x1e\xce\xaf\xae\xef\x2e\x2f\x1e\xce\x6e\x6f\xaf\xbf\xf7\xc1\xa4\x84\x63\x0c\xbf\xf5\x61\xd3\x48\xcb\x80\x8d\x3a\x2a\xf6\x86\xcc\x2d\xf4\x9e\x5c\x44\x63\x28\x3d\x6b\x46\xda\x32\x42\xee\x2e\x11\xfb\x36\xb6\xf7\xa1\xec\x84\x7e\x74\x82\x94\xb3\x74\x1e\xf4\xa1\x77\x0c\xc9\xe9\xf3\x11\x69\xcf\x1d\x0d\xe8\xee\xe0\xe1\xc6\xee\x7d\xe9\x63\xfc\xd2\x94\x6a\x24\x16\xeb\x1d\xef\x05\xd5\xf8\xe6\x97\x23\xe3\xda\xed\x99\xb5\x9a\x4d\x0a\x8b\xbd\xc0\xe8\x34\xe8\x43\x30\xb3\x56\xb9\x2a\x53\x46\xa3\x8a\x0c\x51\xcc\x84\xa9\xcc\x4b\x5a\x44\x14\x8b\xfe\x31\xbf\xcf\x71\x95\x3c\x3d\x9d\xdd\x7c\x7e\xf8\x72\xf9\x63\xbd\x7e\x9d\x12\xce\xdd\xbc\x9a\xd4\xc9\xfd\x9a\xb3\x89\x26\x9a\xa1\x49\x5e\x2f\x92\x25\xe2\x9c\xaf\x7c\xf5\x5b\x43\xdd\xf5\x26\x24\x4a\xa1\xa0\xe7\x33\xc6\x69\xcf\xef\xee\xce\x2d\xca\x16\xbf\xaa\xb9\x9b\x4b\x48\x0b\x9c\x2d\x5c\x49\x40\x61\xbf\x4a\x8a\xa1\xc6\x5c\x2e\xb0\x42\xa7\x6c\x71\xbc\x33\xe7\x6e\x67\xdb\x71\xb4\xb9\x65\x8e\x9d\x5d\xf5\xec\xeb\x2c\x60\x34\x09\x66\x05\x0d\x20\xe5\xc4\x98\x24\x28\x4b\xf9\x80\xb2\xc5\xf6\x02\x38\x76\x13\xf8\xe9\x59\xdd\x4b\xe3\xea\xbb\x94\xeb\x34\xe3\x0d\x44\xf5\x75\x3a\x1c\x47\xa5\x64\xfd\x68\xa3\xd5\x33\x45\x0b\xad\x3d\x94\xbc\x00\xed\x53\x35\x44\xf8\x60\xed\x19\xe4\x05\x58\xdf\xc2\xbb\xae\x9b\x7b\xa7\x82\x17\x40\x7e\x74\x1d\xdc\x07\xf4\x9b\xff\x0b\x70\xee\x35\xcb\x7d\x18\xaf\x1d\xbf\x00\xe5\x36\xec\xe2\xec\x76\xf7\x03\xe0\xc6\x11\x65\x8b\x4e\x1e\xb9\x6c\x3d\xed\x2e\xb8\xfe\xc9\xd2\x79\x12\x6c\x8f\xf7\x28\x28\xb9\xb7\x09\x7e\xea\xde\xa0\xfc\x9b\xa3\x16\x1d\x47\x55\x96\x8e\xa3\xea\x5f\x92\x7f\x03\x00\x00\xff\xff\x98\xe7\x2c\x08\x3d\x11\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 4413, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

