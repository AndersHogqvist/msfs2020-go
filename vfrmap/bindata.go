// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x72\xe3\x36\xb2\xfe\x9f\xa7\x40\x70\x2a\x35\x52\x45\x26\x65\xcf\x25\x09\x2d\xa9\x32\xc9\x4c\x2e\xe7\x78\x32\xae\xb1\x93\xd4\xd9\x38\xa5\x82\x48\x88\x42\x0c\x02\x28\x00\xb4\xac\x71\xf9\x81\xf6\x35\xf6\xc9\xb6\x00\xf0\x02\x90\x94\x46\xde\x5f\xd9\x3f\x36\x09\x74\x7f\x7d\x41\xa3\x81\x6e\x71\xf6\xf9\x9b\xf7\xdf\x5f\xff\xff\xe5\x5b\xb0\xd1\x05\x5d\x7c\x36\x73\xff\x00\x98\x6d\x30\xca\xcc\x03\x00\x33\x4d\x34\xc5\x8b\x42\xad\xd5\xd9\xf4\x6c\x7a\x92\xf3\xf8\x6e\x2d\x0b\x24\x66\xb1\x9b\x71\x54\x94\xb0\x5b\x20\x31\x9d\x43\x92\x72\x06\x81\xde\x09\x3c\x87\xa4\x40\x39\x8e\x05\xcb\x21\xd8\x48\xbc\x9e\xc3\x0c\x69\x94\x34\xa3\xe7\x2b\xa4\xf0\xab\x17\x13\xf2\xdb\x77\xef\x3f\x6c\xa7\xff\xf7\x63\xce\xe7\xb0\x07\xa8\xf4\x8e\x62\xb5\xc1\x58\xd7\x28\x14\xa3\x35\xc5\xfa\x2f\x15\x57\x4f\x51\xaa\x14\x04\x71\xc5\xaa\x52\x49\x84\x06\x4a\xa6\x43\xa4\x7f\x29\xb8\x98\xc5\x8e\xe6\x28\x06\xc9\x35\xd2\x38\x7b\x87\xe4\x2d\x96\x83\xec\x46\xc1\xca\x62\x8d\xef\x75\x6c\xb4\x71\x73\xc0\x7a\x76\x02\x56\x3c\xdb\x81\x87\x6a\x08\x80\x0d\x26\xf9\x46\x27\xe0\x74\x3a\xfd\xe2\xbc\x19\x2d\x90\xcc\x09\x4b\xc0\xb4\x1d\x12\x28\xcb\x08\xcb\xbd\xb1\xc7\xcf\xaa\x87\x0e\x64\x46\x94\xa0\x68\x97\x80\x35\xc5\xf7\x2d\x80\x79\x3b\xc9\x88\xc4\xa9\x26\x9c\x25\x20\xe5\xb4\x2c\x58\x0f\xec\x7f\x0a\x24\x3c\xb0\x15\x4a\x6f\x73\xc9\x4b\x96\x9d\xa4\x9c\x72\x99\x80\x5c\xa2\x5d\x07\x35\x97\x7c\x9b\x80\xd3\x3e\x16\xe5\x28\x3b\x09\x01\x05\x57\xc4\x29\x80\x56\x8a\xd3\x52\xe3\x16\x6c\xc5\xb5\xe6\x45\x60\x36\xc5\x6b\x1d\x0c\x7c\x3c\x21\x2c\xc3\xf7\x09\x38\x7d\x31\xe4\x9c\xe8\x25\x2e\xda\xf1\x4a\xe5\x15\x45\xe9\xed\xf9\x01\x9b\x24\xce\x3c\x93\x38\xd3\x27\x8a\x7c\xc4\x09\x38\xf3\xc1\xec\xf8\xb6\x5a\xaf\x15\xa7\x59\xdf\xde\x4d\x99\xf9\xa6\xd6\x5a\x9d\xfa\x30\x26\x2e\x4e\x10\x25\xb9\x59\x03\xcc\x34\x96\x3d\x7d\xb7\x1b\xe2\xbb\xc5\x53\xe8\x34\xb4\xaf\x6f\x49\x60\x6a\xa8\x98\x12\x88\x45\x77\x88\x96\xb8\xaf\xe3\x89\x74\x66\x75\xfc\xe7\xbb\x22\x9a\xb6\x33\x8f\x35\xae\xc6\x14\x0b\x2e\xf5\x89\xe0\xa2\x14\x40\x0c\x58\x3f\x8d\x02\x2f\x0e\x84\xf6\x7e\x8f\xec\x97\x43\xd1\x0a\xd3\x43\x76\x9c\x75\xb5\x9d\xc5\x76\x77\x2e\x3e\xf3\x77\x7a\xbd\x37\x61\xa9\x30\x50\x5a\x92\x54\xc3\xf3\xda\x6b\x14\x6b\xb0\x29\x9b\x65\x36\xaf\x05\x12\xe1\xab\xc9\x04\xfd\x91\xeb\x4a\xdd\xfe\xcc\xcf\x29\x67\xfe\xa8\xb5\xc7\x1f\xd8\xaa\x60\x9a\x22\x86\x97\x3d\xa2\xda\x1d\xfd\x99\x35\xa7\x94\x6f\x97\x96\x0f\xcc\xc1\x1a\x51\x85\xfd\x79\x8a\x94\x5e\x4a\xcb\x0c\xe6\xe0\xe1\xb1\x31\x36\xe3\x69\x59\x60\xa6\x23\xce\x6e\xf1\xae\x14\x86\xb9\x64\x36\x57\x8c\xf0\x1d\x66\x7a\xec\x79\x1b\x90\x35\x70\xa3\xd1\x2d\xde\x81\xf9\x7c\x0e\xe0\x5b\x95\x22\x81\xe1\xd8\xa3\x02\x40\xf3\x3c\xa7\x78\xe9\xb4\x1a\x8d\xdb\x35\x6f\x96\xb6\x89\xd1\x5a\x1a\xe0\x02\xb3\x25\x61\xcb\x9c\x73\xc3\x5b\x20\xa1\x46\xbe\xf0\x3b\x24\x41\x29\x29\x98\x03\xb8\xd1\x5a\xa8\x24\x8e\xb7\xdb\x6d\xe4\xc8\xa3\x94\x17\xb1\x61\x89\xbf\x85\xe0\x4b\xdf\xdc\x88\x22\x4d\x74\x99\x61\xf0\x25\x80\x93\xde\x24\x67\x79\x38\x5b\x20\x11\xe5\x58\xff\x83\xf3\x62\x34\x36\xa3\x1f\x61\xa3\xc2\x96\xb0\x8c\x6f\x23\xa3\xe9\xa8\x94\x74\xf2\x6c\xb9\xa2\x88\xdd\x3e\x1b\xf7\x76\x5e\x63\x55\x29\x32\xa4\xf1\x3b\x24\x46\x85\xca\x03\x5f\x5a\x83\x04\x57\x60\x0e\x2e\x8c\x92\x17\x2c\x37\x34\x8d\xbe\x13\x60\xdf\x6a\x05\x7d\x27\x56\x41\x15\x29\xac\x2f\x1c\xa3\xe0\x6a\x0f\xc1\x07\x73\x78\x11\xce\x5e\xb3\x9c\x62\x2b\xc0\x1c\xed\x84\xe5\xe3\x26\x06\xec\x46\x6a\x23\x2e\x12\x5c\x45\x84\x31\x13\xcf\xf7\x26\x5c\x7e\x29\x8b\x15\x96\x46\x86\x51\x6e\x1c\x69\xfe\x03\xb9\xc7\xd9\xe8\xd5\xb8\xf1\x9a\x4f\xc2\x72\x9f\xc4\xd7\x2a\x8e\x7d\x31\xb9\x71\xb5\x95\xf3\xd3\xf5\xbb\x0b\xb3\xae\x33\xe4\xce\xf7\x9b\x4f\xaf\x70\xa5\x4c\xa3\x40\x25\xf9\xc0\x32\xde\xc0\x85\x43\x32\x73\x6a\x16\xa3\x05\x0c\x3c\x60\x62\xdb\xdf\x46\xe1\x62\x01\x8b\x28\x10\xbb\xe6\x3d\x67\x3f\x76\xd2\xd6\x70\x0c\xfc\xf4\xeb\x9b\x6e\x0c\x6c\xca\x2c\x42\xd4\x2d\x77\xe0\x71\xb3\x4c\xf5\xc4\x79\x40\x5e\x2d\x5e\x8f\xba\x1a\x0f\x89\x11\x91\x4a\x60\x9c\xf5\xb1\xab\x89\x90\xfc\x0e\x4b\x4d\x52\x44\x97\xc3\x4c\xe1\x74\xc8\xba\xa6\x48\xa8\x1e\x87\x1d\x0d\x09\xb5\x24\x45\x8f\xce\x0c\x86\x64\xb2\xcc\x32\x2c\x97\x83\xd4\xde\x5c\x6f\xdf\x6d\xcd\x76\x62\x78\x0b\x7e\xc7\xab\x2b\x9e\xde\x62\x3d\x82\x5b\x13\x48\x26\x26\xaa\xed\x4b\x79\x6a\x77\x44\xb4\xe1\x4a\x33\x54\xd8\xbd\x9f\x0c\x11\xd8\x74\xf9\x25\x80\xf1\x56\xc1\x66\xc5\xb7\x2a\xe2\xcc\xa4\x00\x3f\x55\xfa\xab\x1a\xc7\x29\x67\x8a\x53\x1c\x51\x9e\x1b\xf1\x36\xb5\xb5\x00\x8f\x01\x52\x4a\xb9\xc2\xc7\x43\x59\xf2\x7d\x58\x05\x56\x0a\xe5\x01\x1a\xee\xa6\xd0\x42\xe5\x60\x0e\xfe\xf7\xea\xfd\x2f\x91\x40\x52\xe1\x11\x8e\xcc\x9d\xdc\x0b\xe8\xbe\x50\x43\x00\x6d\x3e\xf2\xc8\xc2\x23\xa5\x50\xb9\xb7\x9b\xc2\x88\xf7\x26\xcc\x26\x33\x17\xc3\xcf\xe7\x73\x50\xb2\x0c\xaf\x09\xc3\x59\xb8\xd3\xc2\x8c\xd9\xca\x7b\x6c\x4d\xee\x6e\x30\xc2\x88\x36\x0c\x5d\x5b\x3b\xd9\xf5\xe5\x59\xf4\xe2\xab\xb3\xaf\x26\x27\xa7\xd1\x57\x2f\xcf\x9e\xfb\x7a\x19\x6a\xae\x8a\x2a\x78\x2e\xa2\x6b\x42\xf1\x05\xda\x61\x39\xb2\xa9\x28\x89\xe3\x07\xf5\x18\x69\x42\xb1\xcd\xfe\x4a\x4b\x8c\xb5\xc9\x08\x5c\xe6\xf1\xc3\xc7\xc7\xf8\xe1\xfe\x31\x7e\xd8\x3d\x46\xa6\xd4\x99\x04\xf6\x14\xe8\xde\x64\xa1\x04\x9c\x7e\x3d\xf1\x87\x09\x73\xc3\x67\xfe\xe8\x9a\xcb\x02\xe9\x04\x78\x85\x93\x3f\xad\xca\x55\xc6\x0b\x44\x98\x4a\xc0\x1f\xd0\xac\x09\x5c\x99\x3f\x29\xfc\xb3\xf5\x93\xe7\x33\x6b\x96\xc0\x0c\x11\xb1\x4c\x51\xba\xc1\xd9\xd2\x54\x5c\x66\x05\x8e\xb0\xd4\xe4\xc9\xa8\x62\x8f\x18\xd6\x71\x8e\xf9\x16\xaf\x2c\x50\xac\xb0\xbc\x23\x29\x8e\x75\xa1\xe2\xd3\x68\x1a\x4d\xe3\x5a\x50\x25\xe1\xdb\xb7\x97\x57\x3f\x7e\xf1\xfc\xf5\x37\xd3\xe9\x37\xa7\xcf\xbf\x15\xec\x78\x47\xbd\x18\x74\x54\x30\xaa\x0b\x95\x00\x2d\x4b\xec\x0f\x66\x58\xe3\x54\x7f\xc0\x9a\x30\xd4\x9f\xf5\x9d\x07\x4f\xcf\xe0\x13\xfc\xae\x25\x62\x4a\x20\x89\x99\x76\xb8\x7b\xbd\xad\x34\x2a\x30\x5b\xda\xfb\xf8\xd2\x5e\xe8\x8f\xf1\xb4\xe3\xb2\x47\x9c\xe6\x0c\xcb\xbf\x79\x48\x55\x46\x6a\x2c\x25\x22\xec\xa9\x06\x3a\xae\xff\x0e\x13\xb7\x48\x63\xf9\x44\x03\x2d\x8f\xad\xcb\xfe\x86\x36\x86\x67\x81\x97\x07\x4c\xfe\x84\x05\x12\x1d\x1d\xa9\x31\xd7\x60\xda\xf4\xf8\xa7\x2f\xd2\xd5\x6c\x89\xc9\xb2\xfe\xf0\x47\x67\xd2\xd4\x1f\x43\x5a\x4b\xb2\x2a\x4d\xb2\xfe\x9e\x33\x2d\x39\x4d\x5c\x8d\xb2\x5f\x37\xc7\x62\xd3\x77\xea\x58\x22\x0f\x65\xf4\xd0\x36\x14\xa0\xeb\x1f\x50\xbc\xd6\xd0\x5f\x46\x47\x1e\xa1\x2c\x7b\xed\x31\xee\xb9\x64\x7a\x69\xee\x06\x02\x8d\x64\x8e\xf5\xfc\x06\xba\x0b\xfe\x0d\x04\xb6\x88\x9c\xdf\xc0\x1b\xb8\x30\xa4\xaf\x7f\xbe\xb4\x37\xc8\xa7\x8a\x4b\x62\x7b\x87\xf5\xc2\xe5\x53\xd2\xae\x2c\xe5\x7f\x24\xcc\xb7\x2d\x3c\xb1\x52\x2e\x76\xb6\x64\xfe\x94\xf4\x7f\xfd\x13\xbc\x17\x98\x5d\x59\xee\x77\x48\x18\x3d\x80\x5d\x0f\x23\x93\x4b\x35\xac\xd4\x35\x37\xa7\x7c\x77\x49\xcd\xc1\xf0\x0e\x09\x73\x26\x87\x57\x6b\x18\xc8\x80\x89\x89\xb5\x49\x48\xe1\xdc\x00\xae\x5d\xf2\x80\x49\x27\x07\xed\xa1\x36\xb9\xb4\xa5\xf5\x92\xf2\x30\xfd\xef\x66\xe7\xb6\xf4\x76\x23\xb7\x94\xf5\x5d\x2b\x3c\x5d\xef\xb0\xa4\x68\x37\x6c\xd6\x2f\xe8\x8e\xe4\xf6\x2a\x89\x28\x78\x63\x2e\x51\xc9\x9e\xe3\xb8\x2f\x05\x00\x2f\xf2\xdd\x2e\x1c\xd5\x0e\x9c\xf8\x62\xc7\xc3\x0e\x6f\xfb\x0e\x76\x0f\x91\xd4\x6c\x1a\xbf\xdc\x49\x39\xfb\x55\xd2\x04\x78\x0d\x4f\x9b\x5a\x94\x2b\xd2\xa2\x6e\x86\x31\x0c\x57\xb6\x27\xf4\xc7\xab\x17\x13\xf0\xea\x85\x97\x0c\xfc\x6d\xe7\x04\x5b\xa1\xee\xd1\xd4\x4b\x61\x52\x31\x50\x89\xa7\xa1\x2f\x46\xfa\xf5\x6a\x02\xa6\x43\x73\xef\x25\xb1\xcd\x24\xe8\x52\x10\x3c\xa4\x48\xe0\x9d\xce\xd4\x8a\xb0\xec\xd2\xd4\xa2\xa3\x8b\xc8\xd6\xa4\xa3\x07\x54\x6a\x7e\x89\x58\x95\x9e\x1e\xc7\x9d\x1a\xdb\xbc\x9a\x0c\x86\x99\x1e\xf9\xb5\xac\xc9\xbc\xe3\x7e\x7a\x35\x52\x2e\xc3\x4b\xe8\x74\x32\xed\x29\x52\xf7\x8d\x7c\xa7\x35\xcc\x13\xf0\xd0\xb7\xaa\xe6\x38\x60\x5d\x43\x72\xa4\x95\xb5\x59\x61\x93\xa9\xb1\xac\x06\x57\x58\x2f\x1b\x92\xae\xae\x61\x00\x8a\x88\xb3\xd1\xb3\x94\x92\xf4\xf6\xd9\x64\x4f\x49\x32\x0c\x88\x8d\xb7\x28\x0b\xae\xff\x07\x9a\x2c\x43\x10\x15\x80\x27\xaa\xe3\x96\x76\x61\x7b\xb2\x3a\x2e\xc8\x85\xaa\x1a\xa8\x73\xe0\x68\x8d\x7a\x4d\x8f\xe3\xeb\xb1\xd7\x5a\x72\xb3\x2c\xf7\x66\xcf\x83\xea\xc7\xef\x3e\xd5\x25\x7e\xe8\x90\x8e\xf4\xa6\x41\xd0\xaa\xd0\x47\x18\x28\x93\x7a\x5e\x6a\x70\x37\x58\xe2\x4e\x99\xd9\x56\x4b\x1d\x2f\xe5\x8d\x97\x3a\x17\x24\xaf\x8e\x54\x5a\x12\x96\x93\xf5\x6e\xe4\x59\xd1\x49\x85\x7a\x27\x30\x4c\x00\xac\x95\x80\x9d\x0c\x4c\x91\x86\x09\xb0\x15\xe9\x0f\x94\xa3\x5e\x18\x36\x6b\x10\x29\x41\x89\x1e\xc1\x09\x1c\xff\x31\xfd\x73\xdc\x85\x61\xf9\xd3\x61\x4e\x7b\x30\xb5\x5b\x0f\x62\x85\x0b\x63\x82\x60\x1a\xbd\x9c\x0c\xf4\x85\x00\x18\xfb\xbd\xfe\xb6\xb6\x0e\x0b\xdc\xad\x8a\x14\x66\x59\x30\x3a\xb0\x8a\x61\x6b\xd5\xf3\xf3\xe1\x06\x96\x9f\xad\x1c\x55\xd0\x58\x81\x6e\xcc\x91\x41\x2f\x9c\x00\xa6\x0a\x3f\x09\x29\xe3\xec\x59\xdd\x91\xee\xe3\x35\x4f\x9d\x96\xf5\xe7\xfe\x7b\xcf\xfc\xa6\x4d\x8d\xb2\xec\xed\x1d\x66\xfa\x82\x28\x8d\x99\xb9\x89\xbf\x79\xff\xae\x4a\x5d\x17\x1c\x65\x38\x83\x93\x03\x1d\x6c\x4f\xf7\xce\x71\x6d\xf2\x5c\xd2\xca\xc9\xb1\x7e\x4b\xb1\x79\xfc\x6e\xf7\x73\x36\x82\x96\xd1\xfd\x0c\x01\x83\x68\x11\x5c\x1d\xc7\x76\x22\xb8\x0a\x59\xf3\x02\x89\x23\x79\x0d\x69\xc8\xec\xdc\x75\x24\xbb\x23\xf6\x01\x1e\xf7\x65\xbb\xa7\xb9\x25\xfc\x81\x26\xd4\x50\x95\xab\x82\xe8\xa3\x99\x4f\x1c\x7d\xc7\x45\xe2\x90\x77\x3b\x00\xb9\xe8\x38\xb8\xde\xa1\xc7\x43\x34\x1b\x7f\xd8\x55\x9b\x32\xeb\xf8\xe7\x08\x11\x35\xc9\xd2\xe6\x89\x50\xc3\xaa\x6d\x7b\x80\xbb\xa2\x18\x62\xae\xbb\xb8\x87\x64\x57\x24\x43\xec\x61\x3f\xf7\x00\x48\x48\x38\x04\x65\x1b\xbd\x07\x10\xec\xfc\x10\xa3\x96\xa4\x38\xb4\x3a\x92\x14\x43\x6c\x5e\x0b\xf8\x00\xb7\x47\xd5\x07\x79\xf4\xae\x2a\x7b\x7f\xae\x6a\x1a\x8b\x4d\x42\xaa\x9e\xfc\x0f\x00\x66\x71\xfd\xb1\xc4\x6c\xc5\xb3\x5d\xf5\x4d\x40\x46\xee\x00\xc9\xe6\x70\x53\x66\xcd\xa7\x00\x33\x25\x10\x5b\xbc\x6e\x96\xcd\xbe\x5b\xaa\xce\x3a\x81\x94\x22\xa5\xe6\xd0\xbd\x2d\xa6\xb3\xd8\x72\x56\xff\x42\xb4\x26\x00\x3d\xb4\x30\xe2\x9e\x80\xf6\x53\x1d\x8f\x2d\x58\x18\x80\x4f\xc0\xfa\x2d\xba\xea\x9a\x39\x18\x49\x4f\x80\xfc\xc1\xc5\x59\x0b\xe8\x07\xd6\x13\x70\xae\x6d\xe0\xb4\x30\x5e\x88\x3c\x01\xe5\x43\xd4\xc5\xe9\x47\xdc\x11\x70\xb3\x38\x23\x77\x9d\xa8\x31\xe9\x7e\xd1\x9d\x70\x75\x39\xac\x3f\xf4\x60\x9c\xe1\x73\xb8\xa8\xc3\xb8\xe1\xf5\x8f\xaa\x45\x13\xca\x33\xb1\x98\x6d\x9e\x77\x09\xec\xa1\xb4\x98\xc5\x9b\xe7\x8b\x59\x2c\x42\xea\x55\xa9\x35\x67\x3d\x0e\x7b\x14\x01\xce\xec\xbd\x7e\x0e\x07\x7f\xb6\x3d\x77\x5d\x12\x40\x18\x08\x7e\x73\x73\x90\x47\x8b\xaa\x8e\xad\x56\x58\x77\xa3\x1a\xd5\xfb\x98\x95\xdf\xba\x7e\xe9\x9c\x55\xa1\x06\xee\xc3\x82\x35\x97\x5d\x3a\x7b\xaa\x2c\x7e\xbc\xbc\x4a\x66\xb1\x25\x5a\xcc\x08\x13\xa5\xf6\x3e\xf7\x81\x03\xf0\x8e\xad\x67\xe8\x7e\x31\x88\x6a\xd8\x6e\xe6\xa7\xc9\x6a\x4e\xad\xbd\x9e\x75\x00\xee\x65\x10\xa2\x3a\x7c\x3d\x57\x87\xd5\xc2\x39\x5c\xd4\x23\x9f\x72\x79\x13\xb6\xb3\xd8\xe5\xc3\x59\xec\x3e\x2b\xfb\x77\x00\x00\x00\xff\xff\xce\x96\xa2\x38\x6e\x26\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 9838, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

